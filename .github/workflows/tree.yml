name: Generate Directory Tree HTML

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  generate-tree:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for complete tree
    
    - name: Generate directory tree HTML
      run: |
        #!/bin/bash
        
        TARGET_DIR="."                # Target directory to scan (current directory)
        OUTPUT_FILE="index.html"      # Output HTML filename
        
        # List of files to exclude from scanning
        EXCLUDES=("index.html" "style.css" "script.js" "README.md" "tree.sh")
        
        # Clear the output file completely at the start
        > "$OUTPUT_FILE"
        
        # Function to check if a file is excluded
        is_excluded() {
          local filename=$(basename "$1")  # Get basename of the path
          for ex in "${EXCLUDES[@]}"; do   # Loop through exclude list
            if [[ "$filename" == "$ex" ]]; then
              return 0                     # Return true (excluded) if match
            fi
          done
          return 1                         # Return false (not excluded) if no match
        }
        
        # Convert "my-folder-name" → "My Folder Name"
        prettify_name() {
          local raw="$1"
          # Replace '-' with space
          raw="${raw//-/ }"
          # Capitalize each word
          echo "$raw" | awk '{ for (i=1; i<=NF; i++) $i = toupper(substr($i,1,1)) substr($i,2) } 1'
        }
        
        # Recursive function to generate HTML list from directory using details/summary
        generate_html() {
          local dir_path="$1"              # Current directory to scan
          local indent="$2"               # Indentation for pretty formatting
        
          echo "${indent}<ul>" >> "$OUTPUT_FILE"   # Open <ul> for listing items
        
          # Loop over sorted contents of the directory
          for item in "$dir_path"/*; do
            [ -e "$item" ] || continue   # Skip if item does not exist (safe check)
            if is_excluded "$item"; then
              continue                   # Skip excluded files
            fi
        
            local name=$(basename "$item")
            local pretty_name=$(prettify_name "$name")
            local rel_path=$(realpath --relative-to="$TARGET_DIR" "$item")  # Relative path from target
            local link_path="$rel_path"
            if [[ "$link_path" == *.md ]]; then
              link_path="${link_path%.md}"
            fi
        
            if [ -d "$item" ]; then
              # If directory, use <details> and <summary>
              echo "${indent}  <li>" >> "$OUTPUT_FILE"
              echo "${indent}    <details>" >> "$OUTPUT_FILE"
              echo "${indent}      <summary>${pretty_name}</summary>" >> "$OUTPUT_FILE"
              generate_html "$item" "      $indent"   # Recurse with deeper indent
              echo "${indent}    </details>" >> "$OUTPUT_FILE"
              echo "${indent}  </li>" >> "$OUTPUT_FILE"
            elif [ -f "$item" ]; then
              # If file, check extension
              local ext="${name##*.}"
              # Detect file extensions for HTML and MD
                if [[ "$ext" == "html" || "$ext" == "md" ]]; then
                # Remove file extension for display
                local display_name=$(prettify_name "${name%.*}")
                echo "${indent}  <li><a href=\"${link_path}\">${display_name}</a></li>" >> "$OUTPUT_FILE"
                else
                echo "${indent}  <li><a href=\"${link_path}\">${name}</a></li>" >> "$OUTPUT_FILE"
                fi
            fi
          done
        
          echo "${indent}</ul>" >> "$OUTPUT_FILE"   # Close </ul>
        }
        
        # Write the output HTML file (header part)
        cat << 'EOF' > "$OUTPUT_FILE"
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Directory Tree</title>
        </head>
        <body>
          <h1>Directory Tree</h1>
          <ul>
        EOF
        
        # Loop over top-level items in the target directory
        loop_top(){
            for item in "$TARGET_DIR"/*; do
            [ -e "$item" ] || continue          # Skip if not exist
            if is_excluded "$item"; then
                continue                         # Skip excluded files
            fi
                local name=$(basename "$item")      # Get basename
                local pretty_name=$(prettify_name "$name")
            if [ -d "$item" ]; then
                echo "    <li>" >> "$OUTPUT_FILE"
                echo "      <details>" >> "$OUTPUT_FILE"
                echo "        <summary>${pretty_name}</summary>" >> "$OUTPUT_FILE"
                generate_html "$item" "          "   # Increase indentation consistently
                echo "      </details>" >> "$OUTPUT_FILE"
                echo "    </li>" >> "$OUTPUT_FILE"
            elif [ -f "$item" ]; then
                # File at root level
                local ext="${name##*.}"          # Get file extension
                # Detect file extensions for HTML and MD
                if [[ "$ext" == "html" || "$ext" == "md" ]]; then
                # Remove file extension for display
                local display_name=$(prettify_name "${name%.*}")
                echo "    <li><a href=\"${name}\">${display_name}</a></li>" >> "$OUTPUT_FILE"
                else
                echo "    <li><a href=\"${name}\">${name}</a></li>" >> "$OUTPUT_FILE"
                fi
            fi
            done
        }
        
        loop_top
        
        # Close the list and HTML body
        cat << 'EOF' >> "$OUTPUT_FILE"
          </ul>
        </body>
        </html>
        EOF
        
        echo "✅ $OUTPUT_FILE generated!"
    
    - name: Upload generated HTML as artifact
      uses: actions/upload-artifact@v4
      with:
        name: directory-tree-html
        path: index.html
    
    - name: Commit and push changes (if running on main/master)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add index.html
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update directory tree HTML [skip ci]"
          git push
        fi
    
    # Optional: Deploy to GitHub Pages
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        keep_files: true
